var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = XPalm","category":"page"},{"location":"#XPalm-Growth-and-yield-model-for-oil-palm","page":"Home","title":"XPalm - Growth and yield model for oil palm","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<!-- [![Stable](https://img.shields.io/badge/docs-stable-blue.svg)](https://PalmStudio.github.io/XPalm.jl/stable/) -->","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Dev) (Image: Build Status) (Image: Coverage) (Image: ColPrac: Contributor's Guide on Collaborative Practices for Community Packages)","category":"page"},{"location":"","page":"Home","title":"Home","text":"XPalm is a growth and yield model for oil palm (Elaeis guineensis).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\"]\nDepth = 5","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/PalmStudio/XPalm.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"To use the package, type the following in the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using XPalm","category":"page"},{"location":"#Running-the-model","page":"Home","title":"Running the model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The model can be run using the xpalm function. The function takes a table as input and returns a table with the same format as result. The vars argument is a dictionary that maps the names of the columns in the input table to the names of the variables in the model. The sink argument specifies the type of the output table such as a DataFrame, or any table implementing the Tables.jl interface (e.g. XSLX, SQLite, Arrow, see here for all integrations).","category":"page"},{"location":"","page":"Home","title":"Home","text":"using XPalm, CSV, DataFrames\nmeteo = CSV.read(joinpath(dirname(dirname(pathof(XPalm))), \"0-data/meteo.csv\"), DataFrame)\ndf = xpalm(meteo; vars= Dict(\"Scene\" => (:lai,)), sink=DataFrame)","category":"page"},{"location":"#Funding","page":"Home","title":"Funding","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This work is supported by the PalmStudio research project, funded by the SMART Research Institute and CIRAD.","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [XPalm]","category":"page"},{"location":"#XPalm.AbortionRate","page":"Home","title":"XPalm.AbortionRate","text":"AbortionRate(TT_flowering, duration_abortion, abortion_rate_max=1.0, abortion_rate_ref=0.2; random_seed::Int=0)\nAbortionRate(TT_flowering, duration_abortion, abortion_rate_max, abortion_rate_ref, random_generator<:AbstractRNG)\n\nDetermines if the inflorescence will abort based on the trophic state of the plant during a given period in thermal time.\n\nArguments\n\nTT_flowering: thermal time for flowering since phytomer appearence (degree days).\nduration_abortion: duration used for computing abortion rate before flowering (degree days).\n\nInputs\n\ncarbon_offer_after_rm: carbon offer after maintenance respiration (gC/plant).\ncarbon_demand_organs: carbon demand of all organs (gC/plant).\n\nOutputs\n\ncarbon_demand_plant: total carbon demand of the plant (gC/plant).\ncarbon_offer_plant: total carbon offer of the plant (gC/plant).\nstate: phytomer state (undetermined,Aborted,...)\n\nNote\n\nThe abortion is determined at TT_flowering based on the trophic_status of the plant during a period of time before this date. The hypothesis is that a trophic stress can trigger more abortion in the plant.\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractAbortionModel","page":"Home","title":"XPalm.AbstractAbortionModel","text":"abortion process abstract model. \n\nAll models implemented to simulate the abortion process must be a subtype of this type, e.g.  struct MyAbortionModel <: AbstractAbortionModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractAbortionModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractBiomassModel","page":"Home","title":"XPalm.AbstractBiomassModel","text":"biomass process abstract model. \n\nAll models implemented to simulate the biomass process must be a subtype of this type, e.g.  struct MyBiomassModel <: AbstractBiomassModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractBiomassModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractBiomass_From_AreaModel","page":"Home","title":"XPalm.AbstractBiomass_From_AreaModel","text":"biomass_from_area process abstract model. \n\nAll models implemented to simulate the biomass_from_area process must be a subtype of this type, e.g.  struct MyBiomass_From_AreaModel <: AbstractBiomass_From_AreaModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractBiomass_From_AreaModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractBiomass_To_AreaModel","page":"Home","title":"XPalm.AbstractBiomass_To_AreaModel","text":"biomass_to_area process abstract model. \n\nAll models implemented to simulate the biomass_to_area process must be a subtype of this type, e.g.  struct MyBiomass_To_AreaModel <: AbstractBiomass_To_AreaModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractBiomass_To_AreaModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractCarbon_AllocationModel","page":"Home","title":"XPalm.AbstractCarbon_AllocationModel","text":"carbon_allocation process abstract model. \n\nAll models implemented to simulate the carbon_allocation process must be a subtype of this type, e.g.  struct MyCarbon_AllocationModel <: AbstractCarbon_AllocationModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractCarbon_AllocationModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractCarbon_AssimilationModel","page":"Home","title":"XPalm.AbstractCarbon_AssimilationModel","text":"carbon_assimilation process abstract model. \n\nAll models implemented to simulate the carbon_assimilation process must be a subtype of this type, e.g.  struct MyCarbon_AssimilationModel <: AbstractCarbon_AssimilationModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractCarbon_AssimilationModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractCarbon_DemandModel","page":"Home","title":"XPalm.AbstractCarbon_DemandModel","text":"carbon_demand process abstract model. \n\nAll models implemented to simulate the carbon_demand process must be a subtype of this type, e.g.  struct MyCarbon_DemandModel <: AbstractCarbon_DemandModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractCarbon_DemandModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractCarbon_OfferModel","page":"Home","title":"XPalm.AbstractCarbon_OfferModel","text":"carbon_offer process abstract model. \n\nAll models implemented to simulate the carbon_offer process must be a subtype of this type, e.g.  struct MyCarbon_OfferModel <: AbstractCarbon_OfferModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractCarbon_OfferModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractFTSWModel","page":"Home","title":"XPalm.AbstractFTSWModel","text":"AbstractFTSWModel <: AbstractSoil_WaterModel\n\nDefines a structure for soil water model that computes ftsw as an output.\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractFinal_Potential_BiomassModel","page":"Home","title":"XPalm.AbstractFinal_Potential_BiomassModel","text":"final_potential_biomass process abstract model. \n\nAll models implemented to simulate the final_potential_biomass process must be a subtype of this type, e.g.  struct MyFinal_Potential_BiomassModel <: AbstractFinal_Potential_BiomassModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractFinal_Potential_BiomassModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractHarvestModel","page":"Home","title":"XPalm.AbstractHarvestModel","text":"harvest process abstract model. \n\nAll models implemented to simulate the harvest process must be a subtype of this type, e.g.  struct MyHarvestModel <: AbstractHarvestModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractHarvestModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractInitiation_AgeModel","page":"Home","title":"XPalm.AbstractInitiation_AgeModel","text":"initiation_age process abstract model. \n\nAll models implemented to simulate the initiation_age process must be a subtype of this type, e.g.  struct MyInitiation_AgeModel <: AbstractInitiation_AgeModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractInitiation_AgeModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractInternode_DimensionsModel","page":"Home","title":"XPalm.AbstractInternode_DimensionsModel","text":"internode_dimensions process abstract model. \n\nAll models implemented to simulate the internode_dimensions process must be a subtype of this type, e.g.  struct MyInternode_DimensionsModel <: AbstractInternode_DimensionsModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractInternode_DimensionsModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractInternode_Final_Potential_DimensionsModel","page":"Home","title":"XPalm.AbstractInternode_Final_Potential_DimensionsModel","text":"internode_final_potential_dimensions process abstract model. \n\nAll models implemented to simulate the internode_final_potential_dimensions process must be a subtype of this type, e.g.  struct MyInternode_Final_Potential_DimensionsModel <: AbstractInternode_Final_Potential_DimensionsModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractInternode_Final_Potential_DimensionsModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractInternode_Potential_DimensionsModel","page":"Home","title":"XPalm.AbstractInternode_Potential_DimensionsModel","text":"internode_potential_dimensions process abstract model. \n\nAll models implemented to simulate the internode_potential_dimensions process must be a subtype of this type, e.g.  struct MyInternode_Potential_DimensionsModel <: AbstractInternode_Potential_DimensionsModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractInternode_Potential_DimensionsModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractLai_DynamicModel","page":"Home","title":"XPalm.AbstractLai_DynamicModel","text":"lai_dynamic process abstract model. \n\nAll models implemented to simulate the lai_dynamic process must be a subtype of this type, e.g.  struct MyLai_DynamicModel <: AbstractLai_DynamicModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractLai_DynamicModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractLeaf_AreaModel","page":"Home","title":"XPalm.AbstractLeaf_AreaModel","text":"leaf_area process abstract model. \n\nAll models implemented to simulate the leaf_area process must be a subtype of this type, e.g.  struct MyLeaf_AreaModel <: AbstractLeaf_AreaModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractLeaf_AreaModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractLeaf_Final_Potential_AreaModel","page":"Home","title":"XPalm.AbstractLeaf_Final_Potential_AreaModel","text":"leaf_final_potential_area process abstract model. \n\nAll models implemented to simulate the leaf_final_potential_area process must be a subtype of this type, e.g.  struct MyLeaf_Final_Potential_AreaModel <: AbstractLeaf_Final_Potential_AreaModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractLeaf_Final_Potential_AreaModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractLeaf_Potential_AreaModel","page":"Home","title":"XPalm.AbstractLeaf_Potential_AreaModel","text":"leaf_potential_area process abstract model. \n\nAll models implemented to simulate the leaf_potential_area process must be a subtype of this type, e.g.  struct MyLeaf_Potential_AreaModel <: AbstractLeaf_Potential_AreaModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractLeaf_Potential_AreaModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractLeaf_PruningModel","page":"Home","title":"XPalm.AbstractLeaf_PruningModel","text":"leaf_pruning process abstract model. \n\nAll models implemented to simulate the leaf_pruning process must be a subtype of this type, e.g.  struct MyLeaf_PruningModel <: AbstractLeaf_PruningModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractLeaf_PruningModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractLeaf_RankModel","page":"Home","title":"XPalm.AbstractLeaf_RankModel","text":"leaf_rank process abstract model. \n\nAll models implemented to simulate the leaf_rank process must be a subtype of this type, e.g.  struct MyLeaf_RankModel <: AbstractLeaf_RankModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractLeaf_RankModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractLight_InterceptionModel","page":"Home","title":"XPalm.AbstractLight_InterceptionModel","text":"light_interception process abstract model. \n\nAll models implemented to simulate the light_interception process must be a subtype of this type, e.g.  struct MyLight_InterceptionModel <: AbstractLight_InterceptionModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractLight_InterceptionModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractMaintenance_RespirationModel","page":"Home","title":"XPalm.AbstractMaintenance_RespirationModel","text":"maintenance_respiration process abstract model. \n\nAll models implemented to simulate the maintenance_respiration process must be a subtype of this type, e.g.  struct MyMaintenance_RespirationModel <: AbstractMaintenance_RespirationModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractMaintenance_RespirationModel)\n\nGeneric maintenance repspiration model. \n\nThe models used are defined by the types of the maintenance_respiration fields of a  ModelList.\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\n# Using Fvcb model:\nleaf =\n    ModelList(\n        maintenance_respiration = RmQ10(),\n        status = (Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n    )\n\nmaintenance_respiration(leaf, meteo)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractNumber_FruitsModel","page":"Home","title":"XPalm.AbstractNumber_FruitsModel","text":"number_fruits process abstract model. \n\nAll models implemented to simulate the number_fruits process must be a subtype of this type, e.g.  struct MyNumber_FruitsModel <: AbstractNumber_FruitsModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractNumber_FruitsModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractNumber_SpikeletsModel","page":"Home","title":"XPalm.AbstractNumber_SpikeletsModel","text":"number_spikelets process abstract model. \n\nAll models implemented to simulate the number_spikelets process must be a subtype of this type, e.g.  struct MyNumber_SpikeletsModel <: AbstractNumber_SpikeletsModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractNumber_SpikeletsModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractPhyllochronModel","page":"Home","title":"XPalm.AbstractPhyllochronModel","text":"phyllochron process abstract model. \n\nAll models implemented to simulate the phyllochron process must be a subtype of this type, e.g.  struct MyPhyllochronModel <: AbstractPhyllochronModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractPhyllochronModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractPhytomer_CountModel","page":"Home","title":"XPalm.AbstractPhytomer_CountModel","text":"phytomer_count process abstract model. \n\nAll models implemented to simulate the phytomer_count process must be a subtype of this type, e.g.  struct MyPhytomer_CountModel <: AbstractPhytomer_CountModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractPhytomer_CountModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractPhytomer_EmissionModel","page":"Home","title":"XPalm.AbstractPhytomer_EmissionModel","text":"phytomer_emission process abstract model. \n\nAll models implemented to simulate the phytomer_emission process must be a subtype of this type, e.g.  struct MyPhytomer_EmissionModel <: AbstractPhytomer_EmissionModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractPhytomer_EmissionModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractPlant_AgeModel","page":"Home","title":"XPalm.AbstractPlant_AgeModel","text":"plant_age process abstract model. \n\nAll models implemented to simulate the plant_age process must be a subtype of this type, e.g.  struct MyPlant_AgeModel <: AbstractPlant_AgeModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractPlant_AgeModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractPotential_EvapotranspirationModel","page":"Home","title":"XPalm.AbstractPotential_EvapotranspirationModel","text":"potential_evapotranspiration process abstract model. \n\nAll models implemented to simulate the potential_evapotranspiration process must be a subtype of this type, e.g.  struct MyPotential_EvapotranspirationModel <: AbstractPotential_EvapotranspirationModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractPotential_EvapotranspirationModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractReproductive_Organ_EmissionModel","page":"Home","title":"XPalm.AbstractReproductive_Organ_EmissionModel","text":"reproductive_organ_emission process abstract model. \n\nAll models implemented to simulate the reproductive_organ_emission process must be a subtype of this type, e.g.  struct MyReproductive_Organ_EmissionModel <: AbstractReproductive_Organ_EmissionModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractReproductive_Organ_EmissionModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractReserve_FillingModel","page":"Home","title":"XPalm.AbstractReserve_FillingModel","text":"reserve_filling process abstract model. \n\nAll models implemented to simulate the reserve_filling process must be a subtype of this type, e.g.  struct MyReserve_FillingModel <: AbstractReserve_FillingModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractReserve_FillingModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractRoot_GrowthModel","page":"Home","title":"XPalm.AbstractRoot_GrowthModel","text":"root_growth process abstract model. \n\nAll models implemented to simulate the root_growth process must be a subtype of this type, e.g.  struct MyRoot_GrowthModel <: AbstractRoot_GrowthModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractRoot_GrowthModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractSex_DeterminationModel","page":"Home","title":"XPalm.AbstractSex_DeterminationModel","text":"sex_determination process abstract model. \n\nAll models implemented to simulate the sex_determination process must be a subtype of this type, e.g.  struct MySex_DeterminationModel <: AbstractSex_DeterminationModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractSex_DeterminationModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractSoil_WaterModel","page":"Home","title":"XPalm.AbstractSoil_WaterModel","text":"soil_water process abstract model. \n\nAll models implemented to simulate the soil_water process must be a subtype of this type, e.g.  struct MySoil_WaterModel <: AbstractSoil_WaterModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractSoil_WaterModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractStateModel","page":"Home","title":"XPalm.AbstractStateModel","text":"state process abstract model. \n\nAll models implemented to simulate the state process must be a subtype of this type, e.g.  struct MyStateModel <: AbstractStateModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractStateModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractThermal_TimeModel","page":"Home","title":"XPalm.AbstractThermal_TimeModel","text":"thermal_time process abstract model. \n\nAll models implemented to simulate the thermal_time process must be a subtype of this type, e.g.  struct MyThermal_TimeModel <: AbstractThermal_TimeModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractThermal_TimeModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.Beer","page":"Home","title":"XPalm.Beer","text":"Beer(k)\n\nBeer-Lambert law for light interception.\n\nArguments\n\nk: extinction coefficient of light\n\nInputs\n\nlai in m² m⁻².\n\nRequired meteorology data\n\nRi_PAR_f: incident flux of atmospheric radiation in the PAR, in MJ m⁻² d⁻¹.\n\nOutputs\n\naPPFD: absorbed Photosynthetic Photon Flux Density in mol[PAR] m[soil]⁻² d⁻¹.\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.CarbonOfferPhotosynthesis","page":"Home","title":"XPalm.CarbonOfferPhotosynthesis","text":"CarbonOfferPhotosynthesis()\n\nA model that computes carbon offer as the carbon_assimilation.\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.CarbonOfferRm","page":"Home","title":"XPalm.CarbonOfferRm","text":"CarbonOfferRm()\n\nA model that computes carbon offer as the carbon assimilation minus the  maintenance respiration.\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.ConstantRUEModel","page":"Home","title":"XPalm.ConstantRUEModel","text":"ConstantRUEModel(rue)\n\nComputes the carbon_assimilation using a constant radiation use efficiency (rue).\n\nArguments\n\nrue: radiation use efficiency (gC MJ⁻¹)\n\nInputs\n\naPPFD: the absorbed Photosynthetic Photon Flux Density in mol[PAR] m[leaf]⁻² s⁻¹.\n\nOutputs\n\ncarbon_assimilation: carbon offer from photosynthesis\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.DailyDegreeDays","page":"Home","title":"XPalm.DailyDegreeDays","text":"DailyDegreeDays(TOpt1, TOpt2, TBase, TLim)\nDailyDegreeDays(TOpt1=25, TOpt2=30, TBase=15, TLim=40)\n\nCompute thermal time from daily meteo data\n\nArguments\n\nTOpt1: starting optimal temperature for thermal time calculation (degree Celsius)\nTOpt2: ending optimal temperature for thermal time calculation (degree Celsius)\nTBase: Tbase temperature for thermal time calculation (degree Celsius)\nTLim: limit temperature for thermal time calculation (degree Celsius)\n\nOutputs\n\nTEff: daily efficient temperature for plant growth (degree C days) \n\n\n\n\n\n","category":"type"},{"location":"#XPalm.DailyDegreeDaysSinceInit","page":"Home","title":"XPalm.DailyDegreeDaysSinceInit","text":"DailyDegreeDaysSinceInit()\n\nCompute thermal time since organ initiation using :TEff.\n\nOutputs\n\nTT_since_init: daily efficient temperature for organ growth (degree C days)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.DailyPlantAgeModel","page":"Home","title":"XPalm.DailyPlantAgeModel","text":"DailyPlantAgeModel(initiation_age)\n\nPlant age model, simply tracks the age of the plant in days.\n\nArguments\n\ninitiation_age: age of the plant at the start of the simulation (days)\n\nReturns\n\nage: age of the plant (days)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.DegreeDaysFTSW","page":"Home","title":"XPalm.DegreeDaysFTSW","text":"DegreeDaysFTSW(TOpt1, TOpt2, TBase, TLim, threshold_ftsw_stress)\nDegreeDaysFTSW(TOpt1=25, TOpt2=30, TBase=15, TLim=40, threshold_ftsw_stress=0.3)\n\nCompute thermal time from daily meteo data, corrected by FTSW\n\nArguments\n\nTOpt1: starting optimal temperature for thermal time calculation (degree Celsius)\nTOpt2: ending optimal temperature for thermal time calculation (degree Celsius)\nTBase: Tbase temperature for thermal time calculation (degree Celsius)\nTLim: limit temperature for thermal time calculation (degree Celsius)\nthreshold_ftsw_stress: threshold value under which we apply an FTSW stress\n\nInputs\n\nftsw: fraction of transpirable soil water (unitless)\n\nOuputs\n\nTEff: daily efficient temperature for plant growth (degree C days) \nTT_since_init: cumulated thermal time from the first day (degree C days)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.ET0_BP","page":"Home","title":"XPalm.ET0_BP","text":"ET0_BP(LATITUDE,ALTITUDE)\nET0_BP(LATITUDE=0.97,ALTITUDE=50)\n\nCompute potential evapotranspiration \n\nArguments\n\nLATITUDE: latitude (radian)\nALTITUDE: altitude (m)\n\nInputs\n\nmeteo\n\nOutputs\n\nET0: potentiam evapotranpiration (mm)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.FTSW","page":"Home","title":"XPalm.FTSW","text":"FTSW{O}(\n    ini_root_depth::T\n    H_FC::T\n    H_WP_Z1::T\n    Z1::T\n    H_WP_Z2::T\n    Z2::T\n    H_0::T\n    KC::T\n    TRESH_EVAP::T\n    TRESH_FTSW_TRANSPI::T\n    ini_qty_H2O_Vap::T\n    ini_qty_H2O_C1::T\n    ini_qty_H2O_C1minusVap::T\n    ini_qty_H2O_C2::T\n    ini_qty_H2O_C::T\n)\n\nFraction of Transpirable Soil Water model.\n\nNote that there is also a method for FTSW that takes an organ type as type, e.g. FTSW{Leaf}(ini_root_depth = 200.0).\n\nArguments\n\nini_root_depth: root depth at initialization (mm)\nH_FC: Humidity at field capacity (g[H20] g[Soil])\nH_WP_Z1: Humidity at wilting point (g[H20] g[Soil]) for the first layer\nZ1: Thickness of the first layer (mm)\nH_WP_Z2: Humidity at wilting point (g[H20] g[Soil]) for the second layer\nZ2: Thickness of the second layer (mm)\nH_0: Initial soil humidity (g[H20] g[Soil])\nKC: cultural coefficient (unitless)\nTRESH_EVAP: fraction of water content in the evaporative layer below which evaporation is reduced (g[H20] g[Soil])\nTRESH_FTSW_TRANSPI: FTSW treshold below which transpiration is reduced (g[H20] g[Soil])\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.FTSW_BP","page":"Home","title":"XPalm.FTSW_BP","text":"FTSW_BP(H_FC::Float64, H_WP_Z1::Float64,Z1::Float64,H_WP_Z2::Float64,Z2::Float64,H_0::Float64,KC::Float64,TRESH_EVAP::Float64,TRESH_FTSW_TRANSPI::Float64)\n\nFraction of Transpirable Soil Water model.\n\nArguments\n\nini_root_depth: root depth at initialization (mm)\nH_FC: Humidity at field capacity (g[H20] g[Soil])\nH_WP_Z1: Humidity at wilting point (g[H20] g[Soil]) for the first layer\nZ1: Thickness of the first layer (mm)\nH_WP_Z2: Humidity at wilting point (g[H20] g[Soil]) for the second layer\nZ2: Thickness of the second layer (mm)\nH_0: Initial soil humidity (g[H20] g[Soil])\nKC: cultural coefficient (unitless)\nTRESH_EVAP: fraction of water content in the evaporative layer below which evaporation is reduced (g[H20] g[Soil])\nTRESH_FTSW_TRANSPI: FTSW treshold below which transpiration is reduced (g[H20] g[Soil])\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.FemaleBiomass","page":"Home","title":"XPalm.FemaleBiomass","text":"FemaleBiomass(respirationcost,respirationcostoleosynthesis) FemaleBiomass(respirationcost=1.44,respirationcostoleosynthesis=3.2)\n\nCompute female biomass (inflo and bunch) from daily carbon allocation. Allocation to the different components of the bunch (stalk adnd fruit) is proportional to their carbon demand.\n\nArguments\n\nrespiration_cost: respiration cost  (g g-1)\nrespiration_cost_oleosynthesis: respiration cost of fruits oil  (g g-1)\n\ninputs\n\ncarbon_allocation: carbon allocated to female inflo\ncarbon_demand_stalk: carbon demand of the stalk\ncarbon_demand_non_oil: carbon demand of non oil components of fruits\ncarbon_demand_oil: carbon demand of fruits oil\nstate: state of the inflorescence \n\noutputs\n\nbiomass: total ifnlo/bunch biomass\nbiomass_stalk: stalk biomass\nbiomass_fruits: fruits biomass\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.FemaleCarbonDemandModel","page":"Home","title":"XPalm.FemaleCarbonDemandModel","text":"FemaleCarbonDemandModel(lmamin, respirationcost, leafletsbiomasscontribution) FemaleCarbonDemandModel(lmamin= 80.0, respirationcost=1.44, leafletsbiomasscontribution=0.35)\n\nCarbon demand of the female inflorescence based on the finalpotentialfruitbiomass and finalpotentialstalkbiomass\n\nArguments\n\nrespiration_cost: growth respiration cost (g g⁻¹)\n\n-respiration_cost_oleosynthesis: -TT_flowering: -TT_harvest:\n\nduration_fruit_setting: period of thermal time after flowering that determines the number of flowers in the bunch that become fruits, i.e. fruit set (degree days).\n\n-oil_content: -fraction_period_oleosynthesis:- fraction_period_oleosynthesis: fraction of the duration between flowering and harvesting when oleosynthesis occurs -fraction_period_stalk:\n\nlma_min: minimum leaf mass area (g m⁻²)\nleaflets_biomass_contribution: contribution of the leaflet biomass to the total leaf biomass (including rachis)\n\nInputs\n\npotential_area: potential leaf area (m2) \nstate: state of the leaf\n\nOutputs\n\ncarbon_demand: daily leaf carbon demand\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.FemaleFinalPotentialFruits","page":"Home","title":"XPalm.FemaleFinalPotentialFruits","text":"FemaleFinalPotentialFruits(age_mature_female, fraction_first_female)\n\nArguments\n\nage_mature_female: age at which the palm makes bunch of mature size (days).\nfraction_first_female: size of the first bunches on a young palm relative to the size \n\nat maturity (dimensionless)\n\npotential_fruit_number_at_maturity: potential number of fruits at maturity (number of fruits)\npotential_fruit_weight_at_maturity: potential weight of one fruit at maturity (g)\n\nInputs\n\ninitiation_age: age at which the palm starts to make bunches (days)\n\nOutputs\n\npotential_fruits_number: potential number of fruits (number of fruits)\nfinal_potential_fruit_biomass: potential biomass of fruits (g)\nfinal_potential_biomass_stalk: potential biomass of stalk (g)\n\nExamples\n\nusing PlantSimEngine\nusing MultiScaleTreeGraph\nusing XPalm \n\nnode = Node(NodeMTG(\"/\", \"Plant\", 1, 1))\npot_model = XPalm.FemaleFinalPotentialFruits(8.0 * 365, 0.3, 2000.0, 6.5, 2100.0)\n\nm = ModelList(\n    pot_model,\n    status = (initiation_age = 5000.0, )\n)\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\nrun!(m, meteo, PlantMeteo.Constants(), node)\n\nm[:potential_fruits_number]\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.GraphNodeCount","page":"Home","title":"XPalm.GraphNodeCount","text":"GraphNodeCount(graph_node_count_ini=0)\n\nStores the number of nodes in the graph.\n\nArguments\n\ngraph_node_count_ini: the initial number of nodes in the graph.\n\nOutputs\n\ngraph_node_count: the number of nodes in the graph.\n\nDetails\n\nThis model does nothing. It is just used to define the value of the graph's node count so it exists in the status of the organ.\n\nThe node cound should be updated by the models that create new organs at the time-step of organ emission.\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.InternodeBiomass","page":"Home","title":"XPalm.InternodeBiomass","text":"InternodeBiomass(respirationcost) InternodeBiomass(respirationcost=1.44)\n\nCompute internode biomass from daily carbon allocation\n\nArguments\n\ninitial_biomass: initial biomass of the internode (g)\nrespiration_cost: repisration cost  (g g-1)\n\nInputs\n\ncarbon_allocation:carbon allocated to the internode\n\nOutputs\n\nbiomass: internode biomass (g)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.InternodeCarbonDemandModel","page":"Home","title":"XPalm.InternodeCarbonDemandModel","text":"InternodeCarbonDemandModel(stemapparentdensity,respirationcost) InternodeCarbonDemandModel(stemapparentdensity=3000.0,respirationcost=1.44)\n\nCompute internode carbon demand from potential dimensions\n\nArguments\n\nstem_apparent_density: stem apparent density  (g m⁻³)\nrespiration_cost: repisration cost  (g[sugar].g[carbon mass]-1)\n\nInputs\n\npotential_height: potential height of the internode (m)\npotential_radius: potential radius of the internode (m)\n\nOutputs\n\npotential_volume: potential volume of the internode (m³)\ncarbon_demand: daily carbon demand of the internode (g[sugar])\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.LAIModel","page":"Home","title":"XPalm.LAIModel","text":"LAIModel()\n\nCompute the leaf area index (LAI) using all leaves in the scene and the scene surface area.\n\nArguments\n\narea: the surface area of the scene.\n\nInputs\n\nleaf_area: a vector of all leaf area values in the scene\n\nOutputs\n\nlai: the leaf area index (m² m⁻²)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.LeafAreaModel","page":"Home","title":"XPalm.LeafAreaModel","text":"LeafAreaModel(lma_min, leaflets_biomass_contribution, leaf_area_ini)\n\nLeaf area from its biomass.\n\nArguments\n\nlma_min: minimal leaf mass area (when there is no reserve in the leaf)\nleaflets_biomass_contribution: ratio of leaflets biomass to total leaf biomass including rachis and petiole (0-1)\n\nInputs\n\nbiomass: leaf biomass (g)\n\nOutputs\n\nleaf_area: leaf area (m2)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.LeafCarbonDemandModelArea","page":"Home","title":"XPalm.LeafCarbonDemandModelArea","text":"LeafCarbonDemandModelArea(lma_min, respiration_cost, leaflets_biomass_contribution)\n\nCarbon demand of the leaf based on the difference between the current leaf area and the  potential leaf area.\n\nThis model assumes that the leaf is always trying to catch its potential growth, so  leaf demand can increase more than the daily potential to alleviate any previous stress effect.\n\nSee also LeafCarbonDemandModelPotentialArea.\n\nArguments\n\nlma_min: minimum leaf mass area (g m⁻²)\nrespiration_cost: growth respiration cost (g g⁻¹)\nleaflets_biomass_contribution: contribution of the leaflet biomass to the total leaf biomass (including rachis)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.MaleBiomass","page":"Home","title":"XPalm.MaleBiomass","text":"MaleBiomass(respirationcost) MaleBiomass(respirationcost=1.44)\n\nCompute male biomass  from daily carbon allocation\n\nArguments\n\nrespiration_cost: respiration cost  (g g-1)\n\ninputs\n\ncarbon_allocation: carbon allocated to female inflo\nstate: state of the inflorescence \n\noutputs\n\nbiomass: inflo biomass\nlitter_male: biomass of scenescent inflorescent that goes to the litter \n\n\n\n\n\n","category":"type"},{"location":"#XPalm.NumberFruits","page":"Home","title":"XPalm.NumberFruits","text":"NumberFruits(TT_flowering, duration_dev_fruits)\n\nDetermines the number of fruits on the bunch.\n\nArguments\n\nTT_flowering: thermal time for flowering since phytomer appearence (degree days).\nduration_fruit_setting: period of thermal time after flowering that determines the number of flowers in the bunch that become fruits, i.e. fruit set (degree days).\ncomputed: \n\nInputs\n\ncarbon_offer_plant: carbon offer maintenance respiration (gC/plant).\npotential_fruits_number: potential number of fruits (number/bunch).\ncarbon_demand_plant: carbon demand of the plant (gC/plant), used to compute the plant trophic status.\ncarbon_offer_plant: carbon offer of the plant (gC/plant), used to compute the plant trophic status.\n\nOutputs\n\nfruits_number: number of fruits (number/bunch).\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.NumberSpikelets","page":"Home","title":"XPalm.NumberSpikelets","text":"NumberSpikelets(TT_flowering=6300.0, duration_dev_spikelets=675.0)\n\nDetermines the number of spikelets on the fruit bunch.\n\nArguments\n\nTT_flowering: thermal time for flowering since phytomer appearence (degree days).\nduration_dev_spikelets: period of thermal time before flowering that determines the number of spikelets on the fruit bunch (degree days).\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.OrgansCarbonAllocationModel","page":"Home","title":"XPalm.OrgansCarbonAllocationModel","text":"OrgansCarbonAllocationModel()\n\nCompute the carbon to allocate to organs from photosysthesis and reserve mobilization (after maintenance respiration) \n\nArguments\n\ncost_reserve_mobilization: carbon cost to mobilize carbon reserve from stem or leaves\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.Palm","page":"Home","title":"XPalm.Palm","text":"Palm(;\n    nsteps=1,\n    initiation_age=0,\n    parameters=default_parameters(),\n    model_list=main_models_definition(parameters, nsteps)\n)\n\nCreate a new scene with one Palm plant.\n\nArguments\n\nnsteps: number of time steps to run the simulation for (default: 1, should match the number of rows in the meteo data)\ninitiation_age: date of the first phytomer initiation (default: 0)\nparameters: a dictionary of parameters (default: default_parameters())\nmodel_list: a dictionary of models (default: main_models_definition(parameters, nsteps))\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.PhyllochronModel","page":"Home","title":"XPalm.PhyllochronModel","text":"PhyllochronModel(agepalmmaturity,thresholdftswstress,productionspeedinitial,productionspeedmature)\n\nCompute the phyllochron and initiate a new phytomer at every new emergence\n\nArguments\n\nage_palm_maturity: age of the plant when maturity is establiched (days)\nthreshold_ftsw_stress:ftsw treshold below which the phyllochron is reduce\nproduction_speed_initial: initial phyllochron (for seedlings) (leaf.degreeC days-1)\nproduction_speed_mature: phyllochron at plant maturity (leaf.degreeC days-1)\n\nInputs\n\nplant_age= plant age (days)\nTEff: daily efficient temperature for plant growth (degree C days) \nftsw= fraction of tranpirable soil water (unitless)\n\nOutputs\n\nnewPhytomerEmergence: fraction of time during two successive phytomer (at 1 the new phytomer emerge)\nproduction_speed= phyllochron at the current plant age (leaf.degreeC days-1)\nphylo_slow= coefficient of reduction of the phyllochron du to ftsw\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.PhytomerEmission","page":"Home","title":"XPalm.PhytomerEmission","text":"PhytomerEmission(mtg; phytomer_symbol=\"Phytomer\", internode_symbol=\"Internode\", leaf_symbol=\"Leaf\") <: AbstractPhytomer_EmissionModel\n\nA PhytomerEmission model, which emits a new phytomer when called. The new phytomer is composed of an internode and a leaf, and is added as a child of the last phytomer.\n\nArguments\n\nmtg::MultiScaleTreeGraph.Node: The multiscale tree graph of the plant.\nphytomer_symbol::String: The symbol of the phytomer, default to \"Phytomer\".\ninternode_symbol::String: The symbol of the internode, default to \"Internode\".\nleaf_symbol::String: The symbol of the leaf, default to \"Leaf\".\n\nInputs\n\ngraph_node_count::Int: The number of nodes in the graph.\n\nNo other inputs, except for the simulation object (sim_object) as the last argument to run!.\n\nOutputs\n\nlast_phytomer::MultiScaleTreeGraph.Node: The last phytomer of the palm, takes its values from the struct above as its first value.\nphytomer_count::Int: The number of phytomers in the palm.\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.PlantLeafAreaModel","page":"Home","title":"XPalm.PlantLeafAreaModel","text":"PlantLeafAreaModel()\n\nSum of the leaf area at plant scale.\n\nInputs\n\nleaf_area: a vector of leaf area (m²)\n\nOutputs\n\nplant_leaf_area: total leaf area of the plant (m²)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.PlantRm","page":"Home","title":"XPalm.PlantRm","text":"PlantRm()\n\nTotal plant maintenance respiration based on the sum of Rm.\n\nIntputs\n\nRm_organs: a vector of maintenance respiration from all organs in the plant in gC d⁻¹\n\nOutputs\n\nRm: the total plant maintenance respiration in gC d⁻¹\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.PotentialAreaModel","page":"Home","title":"XPalm.PotentialAreaModel","text":"PotentialAreaModel(inflexion_index, slope)\nPotentialAreaModel(inflexion_index=  560.0, slope=100.0)\n\nComputes the instantaneous potential area at a given cumulative thermal time using  a logistic function. In other words, it defines the development of the leaf area at the potential, i.e. without any stress.  It starts around 0.0 and goes to a maximum of final_potential_area.\n\nArguments\n\ninflexion_index: a parameter that defines the relationship between the final potential\n\nleaf area and the inflexion point of the logistic function. The higher the final area, the  longer the time to reach the inflexion point.\n\nslope: the slope of the relationship at the inflexion point.\n\nInputs\n\nfinal_potential_area: the final potential area when the leaf is fully developed\nTT_since_init: the cumulated thermal time since leaf initiation\n\nOutputs\n\npotential_area: potential area of the leaf (m2)\nmaturity: maturity is true when the leaf reaches its final length\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.ReproductiveOrganEmission","page":"Home","title":"XPalm.ReproductiveOrganEmission","text":"add_reproductive_organ!(...)\n\nAdd a new reproductive organ to a phytomer.\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.RmQ10FixedN","page":"Home","title":"XPalm.RmQ10FixedN","text":"RmQ10FixedN(Q10, Rm_base, T_ref, P_alive, nitrogen_content)\n\nMaintenance respiration based on a Q10 computation with fixed nitrogen values  and proportion of living cells in the organs.\n\nArguments\n\nQ10: Q10 factor (values should usually range between: 1.5 - 2.5, with 2.1 being the most common value)\nRm_base: Base maintenance respiration (gC gDM⁻¹ d⁻¹). Should be around 0.06.\nT_ref: Reference temperature at which Q10 was measured (usually around 25.0°C)\nP_alive: proportion of living cells in the organ\nnitrogen_content: nitrogen content of the organ (gN gC⁻¹)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.RootGrowthFTSW","page":"Home","title":"XPalm.RootGrowthFTSW","text":"RootGrowthFTSW(TRESHFTSWSLOWROOTS, ROOTSGROWTHDEPTH, Z1, Z2) RootGrowthFTSW(TRESHFTSWSLOWROOTS=0.2, ROOTSGROWTHDEPTH=0.3, Z1=200, Z2=2000)\n\nCompute root growth depending on thermal time and water stress (ftsw)\n\nArguments\n\nini_root_depth: initial root depth (mm)\nROOTS_GROWTH_DEPTH: root growth in depth (mm.degreeC days-1)\nTRESH_FTSW_SLOW_ROOTS: ftsw treshold below which roots growth is reduced (unitless [0:1])\n\nThe model as a dependency on an AbstractFTSWModel that must return a value for ftsw, and soil_depth.\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.SceneToPlantLightPartitioning","page":"Home","title":"XPalm.SceneToPlantLightPartitioning","text":"SceneToPlantLightPartitioning()\n\nPartitioning from aPPFD at the scene scale to the plant scale based on the relative  leaf area of the plant.\n\nInputs\n\naPPFD: absorbed Photosynthetic Photon Flux Density in mol[PAR] m[soil]⁻² d⁻¹ (scene scale).\nplant_leaf_area: the target plant leaf area\nscene_leaf_area: the total scene leaf area\n\nOutputs\n\naPPFD: absorbed Photosynthetic Photon Flux Density in mol[PAR] plant⁻¹ s⁻¹.\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.SexDetermination","page":"Home","title":"XPalm.SexDetermination","text":"SexDetermination(TT_flowering, duration_abortion, duration_sex_determination, sex_ratio_min, sex_ratio_ref, rng::AbstractRNG)\nSexDetermination(TT_flowering, duration_abortion, duration_sex_determination, sex_ratio_min, sex_ratio_ref; random_seed=1)\n\nDetermines the sex of a phytomer -or rather, its bunch- based on the trophic  state of the plant during a given period in thermal time.\n\nArguments\n\nTT_flowering: thermal time for flowering since phytomer appearence (degree days).\nduration_abortion: duration used for computing abortion rate before flowering (degree days).\nduration_sex_determination: duration used for sex determination before the abortion period(degree days).\nsex_ratio_min: minimum allowed threshold of the sex ratio.\nsex_ratio_ref: reference threshold of the sex ratio, i.e. the value when the trophic status is 1 (offer=demand).\nrng: random number generator, Random.MersenneTwister by default.\nrandom_seed: random seed for the random number generator, 1 by default.\n\nInputs\n\ncarbon_offer_plant: carbon offer at the plant scale (usually after maintenance respiration) (gC/plant).\ncarbon_demand_plant: total carbon demand of the plant (gC/plant), used to compute the plant trophic status.\n\nOutputs\n\nsex: the sex of the phytomer (or bunch) (\"undetermined\", \"Female\" or \"Male\").\ncarbon_demand_sex_determination: carbon demand of the plant integrated over the period of sex determination (gC/plant)\ncarbon_offer_sex_determination: carbon offer of the plant integrated over the period of sex determination (gC/plant)\n\nNote\n\nThe sex of the organ is determined at TT_flowering-duration_abortion based on the trophic_status of the plant during a period of time  before this date. The hypothesis is that a trophic stress can trigger more males in the plant.\n\n\n\n\n\n","category":"type"},{"location":"#PlantSimEngine.run!","page":"Home","title":"PlantSimEngine.run!","text":"run!(object, meteo, constants = Constants())\n\nComputes the light interception of an object using the Beer-Lambert law.\n\nArguments\n\n::Beer: a Beer model, from the model list (i.e. m.light_interception)\nmodels: A ModelList struct holding the parameters for the model with\n\ninitialisations for lai (m² m⁻²): the leaf area index.\n\nstatus: the status of the model, usually the model list status (i.e. m.status)\nmeteo: meteorology structure, see Atmosphere\nconstants = PlantMeteo.Constants(): physical constants. See PlantMeteo.Constants for more details\n\nExamples\n\nusing PlantSimEngine, PlantBiophysics, PlantMeteo\nm = ModelList(light_interception=Beer(0.5), status=(lai=2.0,))\n\nmeteo = Atmosphere(T=20.0, Wind=1.0, P=101.3, Rh=0.65, Ri_PAR_f=300.0)\nrun!(m, meteo)\nm[:aPPFD]\n\n\n\n\n\n","category":"function"},{"location":"#PlantSimEngine.run!-2","page":"Home","title":"PlantSimEngine.run!","text":"Compute root growth\n\nArguments\n\nm: root growth model\nftsw:  fraction of transpirable soil water (unitless [0:1])\nTEff:  daily efficient temperature for plant growth (degree C days) \n\nOutputs\n\nroot_depth: root depth (cm)\n\n\n\n\n\n","category":"function"},{"location":"#PlantSimEngine.run!-Tuple{XPalm.PhytomerEmission, Vararg{Any, 5}}","page":"Home","title":"PlantSimEngine.run!","text":"add_phytomer!(palm, initiation_age)\n\nAdd a new phytomer to the palm\n\nArguments\n\npalm: a Palm\ninitiation_age::Dates.Date: date of initiation of the phytomer \n\n\n\n\n\n","category":"method"},{"location":"#PlantSimEngine.run!-Tuple{XPalm.ReproductiveOrganEmission, Vararg{Any, 5}}","page":"Home","title":"PlantSimEngine.run!","text":"add_reproductive_organ!(...)\n\nAdd a new reproductive organ to a phytomer.\n\n\n\n\n\n","category":"method"},{"location":"#XPalm.KS-Tuple{Any, Any}","page":"Home","title":"XPalm.KS","text":"KS(fillRate, tresh)\n\nCoefficient of stress. \n\nArguments\n\nfillRate: fill level of the compartment\ntresh: filling treshold of the  compartment below which there is a reduction in the flow\n\n\n\n\n\n","category":"method"},{"location":"#XPalm.KS_bp-Tuple{Any, Any}","page":"Home","title":"XPalm.KS_bp","text":"KS_bp(fillRate, tresh)\n\nCoefficient of stress. \n\nArguments\n\nfillRate: fill level of the compartment\ntresh: filling treshold of the  compartment below which there is a reduction in the flow\n\n\n\n\n\n","category":"method"},{"location":"#XPalm.age_relative_value-NTuple{5, Any}","page":"Home","title":"XPalm.age_relative_value","text":"age_relative_value(age, age_min_value, age_max_value, min_value, max_value)\n\nValue that depends on the plant age.\n\nArguments\n\nage: the current age of the plant\nage_min_value: the age at which minimum value is reached (ages below this age will hage min_value)\nage_max_value: the age at which the value is at the maximum value (ages above this age will hage max_value)\nmin_value: the value below or at age_min_value\nmax_value: the value at or above age_max_value\n\nExamples\n\njulia> XPalm.age_relative_value(0, 1, 10, 0.1, 0.8)\n0.1\n\njulia> XPalm.age_relative_value(5, 1, 10, 0.1, 0.8)\n0.4111111111111111\n\njulia> XPalm.age_relative_value(15, 1, 10, 0.1, 0.8)\n0.8\n\n\n\n\n\n","category":"method"},{"location":"#XPalm.compute_compartment_size-Tuple{Any, Any}","page":"Home","title":"XPalm.compute_compartment_size","text":"compute_compartment_size(m, root_depth)\n\nCompute the size of the layers of the FTSW model.\n\nArguments\n\nm: FTSW model\nroot_depth: depth of the root system\n\nReturns\n\nSizeC1: size of the evapotranspirable water layer in the first soil layer (mm)\nSizeVap: size of the evaporative layer within the first layer (mm)\nSizeC1minusVap: size of the transpirable layer within the first layer (SizeC1-SizeVap)\nSizeC2: size of the transpirable water layer in the first soil layer (mm)\nSizeC: size of transpirable soil water (mm) (SizeC2 + SizeC1minusVap)\n\n\n\n\n\n","category":"method"},{"location":"#XPalm.compute_compartment_size-Tuple{XPalm.FTSW_BP, Any}","page":"Home","title":"XPalm.compute_compartment_size","text":"compute_compartment_size(m, root_depth)\n\nCompute the size of the layers of the FTSW model.\n\nArguments\n\nm: FTSW model\nroot_depth: depth of the root system\n\nReturns\n\nSizeC1: size of the evapotranspirable water layer in the first soil layer (mm)\nSizeVap: size of the evaporative layer within the first layer (mm)\nSizeC1minusVap: size of the transpirable layer within the first layer (SizeC1-SizeVap)\nSizeC2: size of the transpirable water layer in the first soil layer (mm)\nSizeC: size of transpirable soil water (mm) (SizeC2 + SizeC1minusVap)\n\n\n\n\n\n","category":"method"},{"location":"#XPalm.xpalm-Tuple{Any}","page":"Home","title":"XPalm.xpalm","text":"xpalm(meteo; vars=Dict(\"Scene\" => (:lai,)), palm=Palm(initiation_age=0, parameters=XPalm.default_parameters()), sink=NamedTuple)\n\nRun the XPalm model with the given meteo data and return the results in a DataFrame.\n\nArguments\n\nmeteo: DataFrame with the meteo data\nvars: A dictionary with the outputs to be returned for each scale of simulation\ninitiation_age: age of the plant at the beginning of the simulation\nparameters: parameters of the model\n\nReturns\n\nDataFrame with the results of the simulation\n\nExample\n\nusing XPalm, CSV, DataFrames\nmeteo = CSV.read(joinpath(dirname(dirname(pathof(XPalm))), \"0-data/meteo.csv\"), DataFrame)\ndf = xpalm(meteo; vars= Dict(\"Scene\" => (:lai,)), sink=DataFrame)\n\n\n\n\n\n","category":"method"}]
}
