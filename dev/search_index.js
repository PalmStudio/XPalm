var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = XPalm","category":"page"},{"location":"#XPalm","page":"Home","title":"XPalm","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for XPalm.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [XPalm]","category":"page"},{"location":"#XPalm.AbstractCarbon_AssimilationModel","page":"Home","title":"XPalm.AbstractCarbon_AssimilationModel","text":"carbon_assimilation process abstract model. \n\nAll models implemented to simulate the carbon_assimilation process must be a subtype of this type, e.g.  struct MyCarbon_AssimilationModel <: AbstractCarbon_AssimilationModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractCarbon_AssimilationModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractFTSWModel","page":"Home","title":"XPalm.AbstractFTSWModel","text":"AbstractFTSWModel <: AbstractSoil_WaterModel\n\nDefines a structure for soil water model that computes ftsw as an output.\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractInitiation_AgeModel","page":"Home","title":"XPalm.AbstractInitiation_AgeModel","text":"initiation_age process abstract model. \n\nAll models implemented to simulate the initiation_age process must be a subtype of this type, e.g.  struct MyInitiation_AgeModel <: AbstractInitiation_AgeModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractInitiation_AgeModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractLai_DynamicModel","page":"Home","title":"XPalm.AbstractLai_DynamicModel","text":"lai_dynamic process abstract model. \n\nAll models implemented to simulate the lai_dynamic process must be a subtype of this type, e.g.  struct MyLai_DynamicModel <: AbstractLai_DynamicModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractLai_DynamicModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractLeaf_AreaModel","page":"Home","title":"XPalm.AbstractLeaf_AreaModel","text":"leaf_area process abstract model. \n\nAll models implemented to simulate the leaf_area process must be a subtype of this type, e.g.  struct MyLeaf_AreaModel <: AbstractLeaf_AreaModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractLeaf_AreaModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractLeaf_Potential_AreaModel","page":"Home","title":"XPalm.AbstractLeaf_Potential_AreaModel","text":"leaf_potential_area process abstract model. \n\nAll models implemented to simulate the leaf_potential_area process must be a subtype of this type, e.g.  struct MyLeaf_Potential_AreaModel <: AbstractLeaf_Potential_AreaModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractLeaf_Potential_AreaModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractLight_InterceptionModel","page":"Home","title":"XPalm.AbstractLight_InterceptionModel","text":"light_interception process abstract model. \n\nAll models implemented to simulate the light_interception process must be a subtype of this type, e.g.  struct MyLight_InterceptionModel <: AbstractLight_InterceptionModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractLight_InterceptionModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractMaintenance_RespirationModel","page":"Home","title":"XPalm.AbstractMaintenance_RespirationModel","text":"maintenance_respiration process abstract model. \n\nAll models implemented to simulate the maintenance_respiration process must be a subtype of this type, e.g.  struct MyMaintenance_RespirationModel <: AbstractMaintenance_RespirationModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractMaintenance_RespirationModel)\n\nGeneric maintenance repspiration model. \n\nThe models used are defined by the types of the maintenance_respiration fields of a  ModelList.\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\n# Using Fvcb model:\nleaf =\n    ModelList(\n        maintenance_respiration = RmQ10(),\n        status = (Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n    )\n\nmaintenance_respiration(leaf, meteo)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractPhyllochronModel","page":"Home","title":"XPalm.AbstractPhyllochronModel","text":"phyllochron process abstract model. \n\nAll models implemented to simulate the phyllochron process must be a subtype of this type, e.g.  struct MyPhyllochronModel <: AbstractPhyllochronModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractPhyllochronModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractPhytomer_EmissionModel","page":"Home","title":"XPalm.AbstractPhytomer_EmissionModel","text":"phytomer_emission process abstract model. \n\nAll models implemented to simulate the phytomer_emission process must be a subtype of this type, e.g.  struct MyPhytomer_EmissionModel <: AbstractPhytomer_EmissionModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractPhytomer_EmissionModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractPlant_AgeModel","page":"Home","title":"XPalm.AbstractPlant_AgeModel","text":"plant_age process abstract model. \n\nAll models implemented to simulate the plant_age process must be a subtype of this type, e.g.  struct MyPlant_AgeModel <: AbstractPlant_AgeModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractPlant_AgeModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractPotential_EvapotranspirationModel","page":"Home","title":"XPalm.AbstractPotential_EvapotranspirationModel","text":"potential_evapotranspiration process abstract model. \n\nAll models implemented to simulate the potential_evapotranspiration process must be a subtype of this type, e.g.  struct MyPotential_EvapotranspirationModel <: AbstractPotential_EvapotranspirationModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractPotential_EvapotranspirationModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractRoot_GrowthModel","page":"Home","title":"XPalm.AbstractRoot_GrowthModel","text":"root_growth process abstract model. \n\nAll models implemented to simulate the root_growth process must be a subtype of this type, e.g.  struct MyRoot_GrowthModel <: AbstractRoot_GrowthModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractRoot_GrowthModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractSoil_WaterModel","page":"Home","title":"XPalm.AbstractSoil_WaterModel","text":"soil_water process abstract model. \n\nAll models implemented to simulate the soil_water process must be a subtype of this type, e.g.  struct MySoil_WaterModel <: AbstractSoil_WaterModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractSoil_WaterModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.AbstractThermal_TimeModel","page":"Home","title":"XPalm.AbstractThermal_TimeModel","text":"thermal_time process abstract model. \n\nAll models implemented to simulate the thermal_time process must be a subtype of this type, e.g.  struct MyThermal_TimeModel <: AbstractThermal_TimeModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractThermal_TimeModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.Beer","page":"Home","title":"XPalm.Beer","text":"Beer(k)\n\nBeer-Lambert law for light interception.\n\nRequired inputs: LAI in m² m⁻². Required meteorology data: Ri_PAR_f, the incident flux of atmospheric radiation in the PAR, in W m[soil]⁻² (== J m[soil]⁻² s⁻¹).\n\nOutput: aPPFD, the absorbed Photosynthetic Photon Flux Density in μmol[PAR] m[leaf]⁻² s⁻¹.\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.ConstantRUEModel","page":"Home","title":"XPalm.ConstantRUEModel","text":"ConstantRUEModel(rue)\n\nComputes the carbon_assimilation using a constant radiation use efficiency (rue).\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.DailyDegreeDays","page":"Home","title":"XPalm.DailyDegreeDays","text":"DailyDegreeDays(TOpt1, TOpt2, TBase, TLim)\nDailyDegreeDays(TOpt1=25, TOpt2=30, TBase=15, TLim=40)\n\nCompute thermal time from daily meteo data\n\nArguments\n\nTOpt1: starting optimal temperature for thermal time calculation (degree Celsius)\nTOpt2: ending optimal temperature for thermal time calculation (degree Celsius)\nTBase: Tbase temperature for thermal time calculation (degree Celsius)\nTLim: limit temperature for thermal time calculation (degree Celsius)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.DailyPlantAgeModel","page":"Home","title":"XPalm.DailyPlantAgeModel","text":"DailyPlantAgeModel(initiation_age)\n\nPlant age model, simply tracks the age of the plant in days.\n\nArguments\n\ninitiation_age: age of the plant at the start of the simulation (days)\n\nReturns\n\nage: age of the plant (days)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.ET0_BP","page":"Home","title":"XPalm.ET0_BP","text":"ET0_BP(LATITUDE,ALTITUDE)\nET0_BP(LATITUDE=0.97,ALTITUDE=50)\n\nCompute root growth depending on thermal time and water stress (ftsw)\n\nArguments\n\nLATITUDE: latitude (radian)\nALTITUDE: altitude (m)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.FTSW","page":"Home","title":"XPalm.FTSW","text":"FTSW{O}(\n    ini_root_depth::T\n    H_FC::T\n    H_WP_Z1::T\n    Z1::T\n    H_WP_Z2::T\n    Z2::T\n    H_0::T\n    KC::T\n    TRESH_EVAP::T\n    TRESH_FTSW_TRANSPI::T\n    ini_qty_H2O_Vap::T\n    ini_qty_H2O_C1::T\n    ini_qty_H2O_C1minusVap::T\n    ini_qty_H2O_C2::T\n    ini_qty_H2O_C::T\n)\n\nFraction of Transpirable Soil Water model.\n\nNote that there is also a method for FTSW that takes an organ type as type, e.g. FTSW{Leaf}(ini_root_depth = 200.0).\n\nArguments\n\nini_root_depth: root depth at initialization (mm)\nH_FC: Humidity at field capacity (g[H20] g[Soil])\nH_WP_Z1: Humidity at wilting point (g[H20] g[Soil]) for the first layer\nZ1: Thickness of the first layer (mm)\nH_WP_Z2: Humidity at wilting point (g[H20] g[Soil]) for the second layer\nZ2: Thickness of the second layer (mm)\nH_0: Initial soil humidity (g[H20] g[Soil])\nKC: cultural coefficient (unitless)\nTRESH_EVAP: fraction of water content in the evaporative layer below which evaporation is reduced (g[H20] g[Soil])\nTRESH_FTSW_TRANSPI: FTSW treshold below which transpiration is reduced (g[H20] g[Soil])\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.FTSW_BP","page":"Home","title":"XPalm.FTSW_BP","text":"FTSW_BP(H_FC::Float64, H_WP_Z1::Float64,Z1::Float64,H_WP_Z2::Float64,Z2::Float64,H_0::Float64,KC::Float64,TRESH_EVAP::Float64,TRESH_FTSW_TRANSPI::Float64)\n\nFraction of Transpirable Soil Water model.\n\nArguments\n\nini_root_depth: root depth at initialization (mm)\nH_FC: Humidity at field capacity (g[H20] g[Soil])\nH_WP_Z1: Humidity at wilting point (g[H20] g[Soil]) for the first layer\nZ1: Thickness of the first layer (mm)\nH_WP_Z2: Humidity at wilting point (g[H20] g[Soil]) for the second layer\nZ2: Thickness of the second layer (mm)\nH_0: Initial soil humidity (g[H20] g[Soil])\nKC: cultural coefficient (unitless)\nTRESH_EVAP: fraction of water content in the evaporative layer below which evaporation is reduced (g[H20] g[Soil])\nTRESH_FTSW_TRANSPI: FTSW treshold below which transpiration is reduced (g[H20] g[Soil])\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.Female","page":"Home","title":"XPalm.Female","text":"Female(state)\n\nA female inflorescence, which has a state that can be either:\n\nInitiation: in initiation phase (cell division)\nAbortion\nFlowering\nBunch: the bunch of fruits is developping\nOleoSynthesis: the inflorescence is in the process of oleosynthesis\nScenescent: dead but still on the plant\nPruned: removed from the plant (e.g. harvested)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.Internode","page":"Home","title":"XPalm.Internode","text":"Internode(state)\n\nAn internode, which has a state of type InternodeState that can be either:\n\nGrowing: has both growth and maintenance respiration\nSnag: has maintenance respiration only, and no leaf \n\nor reproductive organs\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.Leaf","page":"Home","title":"XPalm.Leaf","text":"Leaf(state)\n\nA leaf, which has a state of type LeafState that can be either:\n\nInitiation: in initiation phase (cell division until begining of elongation)\nSpear: spear phase, almost fully developped, but leaflets are not yet deployed\nOpened: deployed and photosynthetically active\nPruned: dead and removed from the plant\nScenescent: dead but still on the plant\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.Male","page":"Home","title":"XPalm.Male","text":"Male(state)\n\nA male inflorescence, which has a state that can be either:\n\nInitiation: in initiation phase (cell division)\nAbortion\nFlowering\nScenescent: dead but still on the plant\nPruned: removed from the plant\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.Palm","page":"Home","title":"XPalm.Palm","text":"Palm(;\n    nsteps=1,\n    initiation_age=0,\n    parameters=default_parameters(),\n    model_list=main_models_definition(parameters, nsteps)\n)\n\nCreate a new scene with one Palm plant.\n\nArguments\n\nnsteps: number of time steps to run the simulation for (default: 1, should match the number of rows in the meteo data)\ninitiation_age: date of the first phytomer initiation (default: 0)\nparameters: a dictionary of parameters (default: default_parameters())\nmodel_list: a dictionary of models (default: main_models_definition(parameters, nsteps))\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.Phytomer","page":"Home","title":"XPalm.Phytomer","text":"Phytomer(state)\n\nA phytomer\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.RmQ10","page":"Home","title":"XPalm.RmQ10","text":"RmQ10{O}(Q10) where O <: Organ\n\nMaintenance respiration.\n\nArguments\n\nQ10: Q10 factor (values should usually range between: 1.5 - 2.5, with 2.1 being the most common value)\nRm_base: Base maintenance respiration (gC gDM⁻¹ d⁻¹). Should be around 0.06.\nT_ref: Reference temperature at which Q10 was measured (default: 25.0°C)\n\nExamples\n\nRmQ10{Leaf}(1.5, 0.06, 25.0)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.RootGrowthFTSW","page":"Home","title":"XPalm.RootGrowthFTSW","text":"root_growth(TRESH_FTSW_SLOW_ROOTS, ROOTS_GROWTH_DEPTH, Z1, Z2)\nroot_growth(TRESH_FTSW_SLOW_ROOTS=0.2, ROOTS_GROWTH_DEPTH=0.3, Z1=200, Z2=2000)\n\nCompute root growth depending on thermal time and water stress (ftsw)\n\nArguments\n\nini_root_depth: initial root depth (mm)\nROOTS_GROWTH_DEPTH: root growth in depth (mm.degreeC days-1)\nTRESH_FTSW_SLOW_ROOTS: ftsw treshold below which roots growth is reduced (unitless [0:1])\n\nThe model as a dependency on an AbstractFTSWModel that must return a value for ftsw, and soil_depth.\n\n\n\n\n\n","category":"type"},{"location":"#PlantSimEngine.run!","page":"Home","title":"PlantSimEngine.run!","text":"Compute root growth\n\nArguments\n\nm: root growth model\nftsw:  fraction of transpirable soil water (unitless [0:1])\nTEff:  daily efficient temperature for plant growth (degree C days) \n\nReturns\n\nroot_depth: root depth (cm)\n\n\n\n\n\n","category":"function"},{"location":"#PlantSimEngine.run!-2","page":"Home","title":"PlantSimEngine.run!","text":"run!(object, meteo, constants = Constants())\n\nComputes the light interception of an object using the Beer-Lambert law.\n\nArguments\n\n::Beer: a Beer model, from the model list (i.e. m.light_interception)\nmodels: A ModelList struct holding the parameters for the model with\n\ninitialisations for lai (m² m⁻²): the leaf area index.\n\nstatus: the status of the model, usually the model list status (i.e. m.status)\nmeteo: meteorology structure, see Atmosphere\nconstants = PlantMeteo.Constants(): physical constants. See PlantMeteo.Constants for more details\n\nExamples\n\nusing PlantSimEngine, PlantBiophysics, PlantMeteo\nm = ModelList(light_interception=Beer(0.5), status=(LAI=2.0,))\n\nmeteo = Atmosphere(T=20.0, Wind=1.0, P=101.3, Rh=0.65, Ri_PAR_f=300.0)\n\nrun!(m, meteo)\n\nm[:aPPFD]\n\n\n\n\n\n","category":"function"},{"location":"#PlantSimEngine.run!-3","page":"Home","title":"PlantSimEngine.run!","text":"Compute degree days\n\nArguments\n\nm: DailyDegreeDays model\n\nReturns\n\nTEff: daily efficient temperature for plant growth (degree C days) \n\n\n\n\n\n","category":"function"},{"location":"#PlantSimEngine.run!-Tuple{XPalm.PhytomerEmission, Vararg{Any, 5}}","page":"Home","title":"PlantSimEngine.run!","text":"add_phytomer!(palm, initiation_age)\n\nAdd a new phytomer to the palm\n\nArguments\n\npalm: a Palm\ninitiation_age::Dates.Date: date of initiation of the phytomer \n\n\n\n\n\n","category":"method"},{"location":"#XPalm.KS-Tuple{Any, Any}","page":"Home","title":"XPalm.KS","text":"KS(fillRate, tresh)\n\nCoefficient of stress. \n\nArguments\n\nfillRate: fill level of the compartment\ntresh: filling treshold of the  compartment below which there is a reduction in the flow\n\n\n\n\n\n","category":"method"},{"location":"#XPalm.KS_bp-Tuple{Any, Any}","page":"Home","title":"XPalm.KS_bp","text":"KS_bp(fillRate, tresh)\n\nCoefficient of stress. \n\nArguments\n\nfillRate: fill level of the compartment\ntresh: filling treshold of the  compartment below which there is a reduction in the flow\n\n\n\n\n\n","category":"method"},{"location":"#XPalm.compute_compartment_size-Tuple{Any, Any}","page":"Home","title":"XPalm.compute_compartment_size","text":"compute_compartment_size(m, root_depth)\n\nCompute the size of the layers of the FTSW model.\n\nArguments\n\nm: FTSW model\nroot_depth: depth of the root system\n\nReturns\n\nSizeC1: size of the evapotranspirable water layer in the first soil layer (mm)\nSizeVap: size of the evaporative layer within the first layer (mm)\nSizeC1minusVap: size of the transpirable layer within the first layer (SizeC1-SizeVap)\nSizeC2: size of the transpirable water layer in the first soil layer (mm)\nSizeC: size of transpirable soil water (mm) (SizeC2 + SizeC1minusVap)\n\n\n\n\n\n","category":"method"},{"location":"#XPalm.compute_compartment_size-Tuple{XPalm.FTSW_BP, Any}","page":"Home","title":"XPalm.compute_compartment_size","text":"compute_compartment_size(m, root_depth)\n\nCompute the size of the layers of the FTSW model.\n\nArguments\n\nm: FTSW model\nroot_depth: depth of the root system\n\nReturns\n\nSizeC1: size of the evapotranspirable water layer in the first soil layer (mm)\nSizeVap: size of the evaporative layer within the first layer (mm)\nSizeC1minusVap: size of the transpirable layer within the first layer (SizeC1-SizeVap)\nSizeC2: size of the transpirable water layer in the first soil layer (mm)\nSizeC: size of transpirable soil water (mm) (SizeC2 + SizeC1minusVap)\n\n\n\n\n\n","category":"method"}]
}
