var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = XPalm","category":"page"},{"location":"#XPalm","page":"Home","title":"XPalm","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for XPalm.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [XPalm]","category":"page"},{"location":"#XPalm.AbstractMaintenance_RespirationModel","page":"Home","title":"XPalm.AbstractMaintenance_RespirationModel","text":"maintenance_respiration process abstract model. \n\nAll models implemented to simulate the maintenance_respiration process must be a subtype of this type, e.g.  struct MyMaintenance_RespirationModel <: AbstractMaintenance_RespirationModel end.\n\nYou can list all models implementing this process using subtypes:\n\nExamples\n\nsubtypes(AbstractMaintenance_RespirationModel)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.Female","page":"Home","title":"XPalm.Female","text":"Female(state)\n\nA female inflorescence, which has a state that can be either:\n\nInitiation: in initiation phase (cell division)\nAbortion\nFlowering\nBunch: the bunch of fruits is developping\nOleoSynthesis: the inflorescence is in the process of oleosynthesis\nScenescent: dead but still on the plant\nPruned: removed from the plant (e.g. harvested)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.Internode","page":"Home","title":"XPalm.Internode","text":"Internode(state)\n\nAn internode, which has a state of type InternodeState that can be either:\n\nGrowing: has both growth and maintenance respiration\nSnag: has maintenance respiration only, and no leaf \n\nor reproductive organs\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.Leaf","page":"Home","title":"XPalm.Leaf","text":"Leaf(state)\n\nA leaf, which has a state of type LeafState that can be either:\n\nInitiation: in initiation phase (cell division until begining of elongation)\nSpear: spear phase, almost fully developped, but leaflets are not yet deployed\nOpened: deployed and photosynthetically active\nPruned: dead and removed from the plant\nScenescent: dead but still on the plant\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.Male","page":"Home","title":"XPalm.Male","text":"Male(state)\n\nA male inflorescence, which has a state that can be either:\n\nInitiation: in initiation phase (cell division)\nAbortion\nFlowering\nScenescent: dead but still on the plant\nPruned: removed from the plant\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.Palm","page":"Home","title":"XPalm.Palm","text":"Palm(mtg, phytomer_count, max_rank, node_count)\nPalm()\n\nCreate a new Palm. The maximum rank is used to determine how many living phytomers (i.e. leaves) are there on the Palm.\n\nPalm() (without arguments) creates a new Palm with a single phytomer, one leaf, and a Root system.\n\nArguments\n\nmtg: a MTG object\nphytomer_count: total number of phytomers emitted by the Palm since germination, i.e. physiological age\nmtg_node_count: total number of nodes in the MTG (used to determine the unique ID)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.Phytomer","page":"Home","title":"XPalm.Phytomer","text":"Phytomer(state)\n\nA phytomer\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.RmQ10","page":"Home","title":"XPalm.RmQ10","text":"RmQ10{O}(Q10) where O <: Organ\n\nMaintenance respiration.\n\nArguments\n\nQ10: Q10 factor (values should usually range between: 1.5 - 2.5, with 2.1 being the most common value)\nRm_base: Base maintenance respiration (gC gDM⁻¹ d⁻¹). Should be around 0.06.\nT_ref: Reference temperature at which Q10 was measured (default: 25.0°C)\n\nExamples\n\nRmQ10{Leaf}(1.5, 0.06, 25.0)\n\n\n\n\n\n","category":"type"},{"location":"#XPalm.add_phytomer!-Tuple{Palm, Dates.Date}","page":"Home","title":"XPalm.add_phytomer!","text":"add_phytomer!(palm, initiation_date)\n\nAdd a new phytomer to the palm\n\nArguments\n\npalm: a Palm\ninitiation_date::Dates.Date: date of initiation of the phytomer \n\n\n\n\n\n","category":"method"},{"location":"#XPalm.add_reproductive_organ-Tuple{XPalm.Phytomer, Any}","page":"Home","title":"XPalm.add_reproductive_organ","text":"ex: add_reproductive_organ(node[:organ], node)\n\n\n\n\n\n","category":"method"},{"location":"#XPalm.determine_sex-Tuple{Any, Any, Any}","page":"Home","title":"XPalm.determine_sex","text":"Determine the sex of the reproductive organ based on the trophic state of the palm tree on x last days\n\n\n\n\n\n","category":"method"},{"location":"#XPalm.maintenance_respiration","page":"Home","title":"XPalm.maintenance_respiration","text":"maintenance_respiration!(     object::ModelList,     meteo::M=nothing,      constants=PlantMeteo.Constants(),      extra=nothing ) where {M<:Union{PlantMeteo.AbstractAtmosphere,Nothing}). \n\nmaintenance_respiration(     object::ModelList,     meteo::M=nothing,      constants=PlantMeteo.Constants(),      extra=nothing ) where {M<:Union{PlantMeteo.AbstractAtmosphere,Nothing}). \n\nmaintenance_respiration!(     object::MultiScaleTreeGraph.Node,     models::Dict{String,M},     meteo::TimeStepTable{<:PlantMeteo.AbstractAtmosphere},     constants=PlantMeteo.Constants() )\n\nComputes the maintenance_respiration process for one or several components based on the type of  the model the object was parameterized with in object.maintenance_respiration, and on one or  several meteorology time-steps.\n\nArguments\n\nobject::ModelList: the object to simulate. It can be a ModelList, a Dict or an AbstractArray of,\n\nor a MultiScaleTreeGraph.Node.\n\nmodels::Dict{String,M}: the models to use for the simulation. It is a Dict with the node symbols as \n\nkeys and the associated ModelList as value. It is used only for the MTG version.\n\nmeteo::Union{Nothing,PlantMeteo.AbstractAtmosphere,TimeStepTable{PlantMeteo.AbstractAtmosphere}}: the \n\nmeteo data to use for the simulation.\n\nconstants=PlantMeteo.Constants(): the constants to use for the simulation.\nextra=nothing: extra data to use for the simulation.\n\nReturns\n\nThe non mutating function returns a simulated copy of the object, and the mutating version modifies the object passed as argument, and returns nothing.  Users may retrieve the results from the object using the status  function (see examples).\n\nNotes\n\nThe models available for this process can be listed using subtypes on the process  abstract type:\n\nsubtypes(AbstractMaintenance_RespirationModel)\n\nThis function calls maintenance_respiration!_ under the hood, but manages the details about time-steps, objects and MTG nodes.\n\nExamples\n\nImport the packages: \n\nusing PlantSimEngine, PlantMeteo\n\nCreate a model implementation:\n\nstruct DummyModel <: AbstractMaintenance_RespirationModel end\n\nDefine the inputs and outputs of the model with default values:\n\nPlantSimEngine.inputs_(::DummyModel) = (X = -Inf, )\nPlantSimEngine.outputs_(::DummyModel) = (Y = -Inf, )\n\nImplement the model:\n\nfunction maintenance_respiration!_(::DummyModel,object,status,meteo,constants,extra=nothing)\n    status.Y = status.X + meteo.T\nend\n\nCreate a model list with a dummy model, and initalize X to 0.0:\n\nmodels = ModelList(\n    maintenance_respiration = DummyModel(),\n    status = (X=0.0,),\n)\n\nCreate a meteo\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, Rh = 0.65)\n\nSimulate the process:\n\nmaintenance_respiration!(models, meteo)\n\nRetrieve the results:\n\n(models[:X],models[:Y])\n\nGeneric maintenance repspiration model. \n\nThe models used are defined by the types of the maintenance_respiration fields of a  ModelList.\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\n# Using Fvcb model:\nleaf =\n    ModelList(\n        maintenance_respiration = RmQ10(),\n        status = (Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n    )\n\nmaintenance_respiration(leaf, meteo)\n\n\n\n\n\n","category":"function"},{"location":"#XPalm.maintenance_respiration!","page":"Home","title":"XPalm.maintenance_respiration!","text":"maintenance_respiration!(     object::ModelList,     meteo::M=nothing,      constants=PlantMeteo.Constants(),      extra=nothing ) where {M<:Union{PlantMeteo.AbstractAtmosphere,Nothing}). \n\nmaintenance_respiration(     object::ModelList,     meteo::M=nothing,      constants=PlantMeteo.Constants(),      extra=nothing ) where {M<:Union{PlantMeteo.AbstractAtmosphere,Nothing}). \n\nmaintenance_respiration!(     object::MultiScaleTreeGraph.Node,     models::Dict{String,M},     meteo::TimeStepTable{<:PlantMeteo.AbstractAtmosphere},     constants=PlantMeteo.Constants() )\n\nComputes the maintenance_respiration process for one or several components based on the type of  the model the object was parameterized with in object.maintenance_respiration, and on one or  several meteorology time-steps.\n\nArguments\n\nobject::ModelList: the object to simulate. It can be a ModelList, a Dict or an AbstractArray of,\n\nor a MultiScaleTreeGraph.Node.\n\nmodels::Dict{String,M}: the models to use for the simulation. It is a Dict with the node symbols as \n\nkeys and the associated ModelList as value. It is used only for the MTG version.\n\nmeteo::Union{Nothing,PlantMeteo.AbstractAtmosphere,TimeStepTable{PlantMeteo.AbstractAtmosphere}}: the \n\nmeteo data to use for the simulation.\n\nconstants=PlantMeteo.Constants(): the constants to use for the simulation.\nextra=nothing: extra data to use for the simulation.\n\nReturns\n\nThe non mutating function returns a simulated copy of the object, and the mutating version modifies the object passed as argument, and returns nothing.  Users may retrieve the results from the object using the status  function (see examples).\n\nNotes\n\nThe models available for this process can be listed using subtypes on the process  abstract type:\n\nsubtypes(AbstractMaintenance_RespirationModel)\n\nThis function calls maintenance_respiration!_ under the hood, but manages the details about time-steps, objects and MTG nodes.\n\nExamples\n\nImport the packages: \n\nusing PlantSimEngine, PlantMeteo\n\nCreate a model implementation:\n\nstruct DummyModel <: AbstractMaintenance_RespirationModel end\n\nDefine the inputs and outputs of the model with default values:\n\nPlantSimEngine.inputs_(::DummyModel) = (X = -Inf, )\nPlantSimEngine.outputs_(::DummyModel) = (Y = -Inf, )\n\nImplement the model:\n\nfunction maintenance_respiration!_(::DummyModel,object,status,meteo,constants,extra=nothing)\n    status.Y = status.X + meteo.T\nend\n\nCreate a model list with a dummy model, and initalize X to 0.0:\n\nmodels = ModelList(\n    maintenance_respiration = DummyModel(),\n    status = (X=0.0,),\n)\n\nCreate a meteo\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, Rh = 0.65)\n\nSimulate the process:\n\nmaintenance_respiration!(models, meteo)\n\nRetrieve the results:\n\n(models[:X],models[:Y])\n\nGeneric maintenance repspiration model. \n\nThe models used are defined by the types of the maintenance_respiration fields of a  ModelList.\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\n# Using Fvcb model:\nleaf =\n    ModelList(\n        maintenance_respiration = RmQ10(),\n        status = (Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n    )\n\nmaintenance_respiration(leaf, meteo)\n\n\n\n\n\n","category":"function"},{"location":"#XPalm.maintenance_respiration!_","page":"Home","title":"XPalm.maintenance_respiration!_","text":"maintenancerespiration!(     mod_type::DataType,     object::ModelList,     status,     meteo=nothing,      constants=PlantMeteo.Constants(),      extra=nothing ) \n\nThe base function for the simulation of the maintenance_respiration process.  Modelers should implement a method for this function for their own model type, and  PlantSimEngine.jl will automatically handle everything else.\n\nArguments\n\nmod_type::DataType: The type of the model to use for the simulation, used for \n\ndispatching to the right model implementation.\n\nobject::ModelList: The list of models to simulate.\nstatus: The status of the simulation, usually from the object, but not always (can be a \n\nsubset of for e.g. one time-step).\n\nmeteo=nothing: The meteo data to use for the simulation.\nconstants=PlantMeteo.Constants(): The constants to use for the simulation.\nextra=nothing: Extra arguments to pass to the model. This is useful for e.g. passing\n\nthe node of an MTG to the model.\n\nNotes\n\nThis function is the simulation workhorse, and is called by the maintenance_respiration  and maintenance_respiration! functions under the hood. \n\nUsers should never have to call this function directly.\n\n\n\n\n\n","category":"function"}]
}
